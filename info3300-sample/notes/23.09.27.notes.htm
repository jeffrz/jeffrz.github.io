<html><head>
<title>INFO 3300 - September 27</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">
  
  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/styles/default.min.css">
  <link rel="stylesheet" href="../css/hljs-base16.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/highlight.min.js"></script>
  
  <script src="https://d3js.org/d3.v7.min.js"></script>
  
  <style>
  
  .gridlines .domain {
    display: none;
  }
  
  .gridlines line {
    stroke: #444;
  }
    

  </style>

</head>
<body>
  <div class="container larger">
  <h3>Notes for September 27</h3>
  <p>
    In this lecture we'll explore why d3 data joins (<a href="https://observablehq.com/@d3/learn-d3-joins">demos here</a>) add flexibility to our code and see some of the neat ways we can smoothen out transitions. To do this, we'll make a bar chart using <a href="https://observablehq.com/@d3/d3-scaleband">scaleBand</a>.
  </p>
  <p>
    The dataset for this page comes from the <a href='http://bechdeltest.com/'>Bechdel Test Database</a> where users categories movies based on whether they have (1) at least two characters who identify as women in it (2) who talk to each other (3) about something besides a man. The idea behind the test is to characterize gender representation and equity in films. Though it's called a "test", one might better think of it as a way to audit movies as a whole, as it's a very coarse measure for representation. You can see some more analyses and additional context in this <a href="https://fivethirtyeight.com/features/the-dollar-and-cents-case-against-hollywoods-exclusion-of-women/">FiveThirtyEight article</a>. For our purposes, I've aggregated movie ratings along different decades of release. A genre is counted if more than 20 films have been rated in that category (whether pass or fail).
  </p>

  <h5>HTML for today:</h5>
  
  <svg id="barchart" height="500" width="800" style="margin-top:50px" >
  </svg>
  <!--- For a certain homework remember that we just want span tags and not fancy buttons --->
  <div id="button-bar"></div>


  <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
  <h5>Code for today:</h5>
  <pre>
    <code id="display1" class="hljs javascript">
    </code>
  </pre>

  <!--- Code for today's class --->
  <script id="notes1">

  
    // Do the usual things to set up the chart area and incorporate margins
    const svg = d3.select("svg#barchart");
    const width = svg.attr("width");
    const height = svg.attr("height");
    const margin = {top: 10, right: 10, bottom: 50, left: 50};
    const chartWidth = width - margin.left - margin.right;
    const chartHeight = height - margin.top - margin.bottom;

    let annotations = svg.append("g").attr("id","annotations");
    let chartArea = svg.append("g").attr("id","points")
                    .attr("transform",`translate(${margin.left},${margin.top})`);

    // Import some JSON data
    d3.json("../datasets/bechdeltest-by-genre.json", d3.autoType)
      .then( (yearData) => {
        
    // Mercifully, the data import cleanly (because I generated them using a Python script!)
    console.log(yearData);
    
    
    // We began by creating a single bar chart. Then we modified this code to work with buttons!
    // For now, let's pick a dataset for one set of years
    // const data = yearData['All Years']
    // console.log(data)
    // 
    // // First scale is same as we've seen, but we'll hardcode the domain for percentages
    // // Users will expect a 0 to 100 percent scale, so we'll go with that 
    // const percentScale = d3.scaleLinear().domain([0,1]).range([chartHeight, 0]);
    // 
    // // We want bars across the X axis. How do we make those?
    // // We use a scaleBand which creates segments for each nominal value automatically
    // //  First we have to find the 'extent' of different nominal values
    // const genres = d3.map(data, d => d.genre)  // d3.map just runs a function on each item in an array
    // console.log(genres)
    // // Now we make the scaleBand -- note the additional property called .padding to space bars out
    // const genreScale = d3.scaleBand().domain(genres).range([0, chartWidth])
    //                                  .padding(0.05);
    // 
    // // Make some axis labels and gridlines the usual way
    // let leftAxis = d3.axisLeft(percentScale).tickFormat(d3.format('.0%'));
    // let leftGridlines = d3.axisLeft(percentScale)
    //                       .tickSize(-chartWidth-10)
    //                       .tickFormat("")
    // annotations.append("g")
    //            .attr("class", "y axis")
    //            .attr("transform",`translate(${margin.left-10},${margin.top})`)
    //            .call(leftAxis)
    // annotations.append("g")
    //            .attr("class", "y gridlines")
    //            .attr("transform",`translate(${margin.left-10},${margin.top})`)
    //            .call(leftGridlines);
    // let bottomAxis = d3.axisBottom(genreScale)
    // // We're not making gridlines, since they'll just stick up from the bars
    // annotations.append("g")
    //            .attr("class", "x axis")
    //            .attr("transform",`translate(${margin.left},${chartHeight+margin.top+10})`)
    //            .call(bottomAxis);
    // 
    // // Now do the data join to make some rectangles
    // chartArea.selectAll('rect.bar').data( data )
    //          .join('rect').attr('class','bar')
    //          .attr("fill", "steelblue")
    //          .attr("x", d => genreScale(d.genre))
    //          .attr("y", d => percentScale(d.percentpass))
    //          .attr("height", d => percentScale(0) - percentScale(d.percentpass))
    //          .attr("width", genreScale.bandwidth());
             
    
    
    // The first problem we observed once we got everything working was that the axis labels
    //  were not being updated when you press the button -- we just get more labels on labels
    // To fix this, we need to keep a reference to the axes OUTSIDE of the function
    // This allows us to update the same axis object instead of creating new ones over and over again
    // (Later, this also made it easy to animate the change)
    
    // We can just do the whole percent scale outside of the function since that never changes
    const percentScale = d3.scaleLinear().domain([0,1]).range([chartHeight, 0]);
    let leftAxis = d3.axisLeft(percentScale).tickFormat(d3.format('.0%'));
    let leftGridlines = d3.axisLeft(percentScale)
                          .tickSize(-chartWidth-10)
                          .tickFormat("")
    annotations.append("g")
               .attr("class", "y axis")
               .attr("transform",`translate(${margin.left-10},${margin.top})`)
               .call(leftAxis)
    annotations.append("g")
               .attr("class", "y gridlines")
               .attr("transform",`translate(${margin.left-10},${margin.top})`)
               .call(leftGridlines);
    
    // The x axis is going to be changing because genres change - we need to store and adjust it
    // We leave xAxis as a blank axis for now, but keep the reference outside of the function so we can rewrite it
    let bottomAxis = d3.axisBottom()
    let bottomAxisG = annotations.append("g")
                             .attr("class", "x axis")
                             .attr("transform",`translate(${margin.left},${chartHeight+margin.top+10})`)
                             // Don't use .call() for a blank axis
    
    // // THIS IS THE ORIGINAL VERSION OF UPDATEBARS BEFORE THE ANIMATIONS WERE ADDED
    // //  (both updateBars and updateBarsAnimated use the scales/axes above)
    // function updateBars(yearKey) {
    // 
    //   const data = yearData[yearKey]
    //   console.log(data)
    // 
    //   const genres = d3.map(data, d => d.genre) 
    //   const genreScale = d3.scaleBand().domain(genres).range([0, chartWidth])
    //                                    .padding(0.05);
    // 
    //   // We copied most of our code for axes outside of these when we added the buttons (see above)
    //   // Now we just need to *update* the X axis for the new set of genres
    //   bottomAxis.scale(genreScale)
    //   // ... and (re)apply it
    //   bottomAxisG.call(bottomAxis);
    // 
    //   // Now do the data join to make some rectangles
    //   chartArea.selectAll('rect.bar').data( data )
    //            .join('rect').attr('class','bar')
    //            .attr("fill", "steelblue")
    //            .attr("x", d => genreScale(d.genre))
    //            .attr("y", d => percentScale(d.percentpass))
    //            .attr("height", d => percentScale(0) - percentScale(d.percentpass))
    //            .attr("width", genreScale.bandwidth());
    // }        
    
    
    // Stretch goal - make this animated!
    //  NOTE: In order to animate within .join() we have to use some odd syntax
    //    We use .call( enter => enter.transition().stufftoanimate )  in the chain
    //    This is because your enter, update, and exit functions have to return the original chain
    //    And just putting a plain .transition() in the chain would cause them to return an animation object instead
    //    .call() serves to "wrap up" the transition so the correct thing is still returned to .join()
    function updateBarsAnimated(yearKey) {
      
      const data = yearData[yearKey]
      console.log(data)
      
      const genres = d3.map(data, d => d.genre) 
      const genreScale = d3.scaleBand().domain(genres).range([0, chartWidth])
                                       .padding(0.05);
      
      // Update and animate axes
      bottomAxis.scale(genreScale)
      bottomAxisG.transition().call(bottomAxis);
      
      // FOR Friday:
      // Something is going on, still... Take a look between a few decades and think about how the rectangles
      //  are being re-used by the data join. Are they consistent? Does it match what the axis labels do?
      // To solve this, we added d => d['genre'] to the data join
      // This forces the join to make sure that the same genres are applied
      //  to the same rect elements across the join to maintain consistency
      chartArea.selectAll('rect.bar').data( data, d => d['genre']  )
               .join( enter => enter.append('rect')
                                    .attr('class','bar')
                                    .attr("fill", "steelblue")
                                    .attr("x", d => genreScale(d.genre))
                                    .attr("y", d => percentScale(d.percentpass))
                                    .attr("height", d => percentScale(0) - percentScale(d.percentpass))
                                    .attr("width", genreScale.bandwidth())
                                    .attr("opacity", 0) // Set opacity low, then animate to 1 to make them fade in
                                    .call( enter => enter.transition()
                                                         .attr('opacity',1) ),
                      update => update.call( update => update.transition()  // Animate resizing and movement
                                                             .attr("fill", "steelblue")
                                                             .attr("x", d => genreScale(d.genre))
                                                             .attr("y", d => percentScale(d.percentpass))
                                                             .attr("height", d => percentScale(0) - percentScale(d.percentpass))
                                                             .attr("width", genreScale.bandwidth()) ),
                      exit => exit.call( exit => exit.transition().attr('opacity',0).remove() ) ); // Animate opacity to fade out
      
      // In the first in-class iteration, I just used .transition directly
      // This is technically incorrect. You should nest things inside .call() as illustrated above when animating.
      // See explanation below:
              
      // Here's why we need to do the stuff with .call
      // In order for .join to work when you use enter => functions, the anonymous functions MUST return a selection
      // So enter => {stuff} MUST return enter (the selection of stuff that should exist but doesn't yet) in order to work
      //  The same is true for update => and exit =>
      // When we add .transition() to a chain, it disrupts the returned object, breaking how .join works
      //  (this is because .transition returns an object relating to the animation, and not the original selection)
      // But... if we nest the transition inside of a .call, then .call returns the enter selection and it works
      // So whenever you use .transition in a .join, you must nest a .call to make sure selections are returned properly
    }   
    
    
    
    
    
    
    // Let's make some buttons for each of the years in the dataset
    // First we have to find the 'extent' of different years offered as keys
    //  One easy way if it's a dict is to use a static method provided by Object: Object.keys( )
    //   See more of them here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object#static_methods 
    const allKeys = Object.keys(yearData).sort();
    allKeys.forEach( d => {
      // For each year key, add a new button to the button bar
      d3.select("div#button-bar")
        .append("button")
        .text( d )
        .on("click", function() {
          // When it's clicked, call updateBars to update the chart
          updateBarsAnimated( d );
        })
    });
    
    
    // We do not want to start with a blank screen, so call it once
    updateBarsAnimated('All Years');
  
  
  });  
  
  
  
  
  
  
  </script>
  
  
  
  
  
  

  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  
  function sanitize(s) {
    return s.replace("<br>", "\\n")
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
          }
    document.getElementById("display1").innerHTML = sanitize( document.getElementById("notes1").innerText);
    hljs.highlightAll();
  </script>


  </div>
</body>
</html>
