<html><head>
<title>INFO 3300 - October 16</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">
  
  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/styles/default.min.css">
  <link rel="stylesheet" href="../css/hljs-base16.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/highlight.min.js"></script>
  
  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://d3js.org/topojson.v3.min.js"></script>
  
  <style>
    
    .county {
      fill: slateblue;
      stroke: none;
    }

    .state {
      fill: lightgrey;
      stroke: none;
    }

    .county-outline {
      stroke: darkblue;
      stroke-width: 1px;
      fill: none;
    }

    .state-outline {
      stroke: darkgrey;
      stroke-width: 2px;
      fill: none;
    }

    .graticule {
      fill: none;
      stroke: lightgrey;
    }


    .gridlines line {
      stroke: #bbb;
    }

    .gridlines .domain {
      stroke: none;
    }
  
  </style>

</head>
<body>
  <div class="container larger">
  <h3>Notes for October 16</h3>
  <p>Today we'll enable panning and zooming gestures on both scatterplots and maps. Refer to the documentation for <a href="https://github.com/d3/d3-zoom">d3-zoom</a> for more information.</p> 
  
  
  
  <h5>HTML for today:</h5>

  <svg id="plot" height="600" width="600" style="background: #fff; margin-top:50px" >
  </svg>

  <svg id="map" height="600" width="600" style="background: #fff; margin-top:50px" >
  </svg>


  <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
  <h5>Code for today:</h5>
  <pre>
    <code id="display1" class="hljs javascript">
    </code>
  </pre>


  <!--- Code for today's class --->
  <script id="notes1">
  
  const plot = d3.select("svg#plot");
  const width = plot.attr("width");
  const height = plot.attr("height");
  const margin = { top: 10, right: 10, bottom: 50, left:50};
  const chartWidth = width - margin.left - margin.right; 
  const chartHeight = height - margin.top - margin.bottom;
  const yAxisArea = plot.append("g").attr("transform",`translate(${margin.left-2},${margin.top})`);
  const xAxisArea = plot.append("g").attr("transform",`translate(${margin.left},${chartHeight+2+margin.top})`);
  const chartArea = plot.append("g").attr("transform",`translate(${margin.left},${margin.top})`);

  const drawPlot = async () => {
    
    let data = await d3.csv("../datasets/gapminder.csv");
    
    data.forEach( (d, i) => {
      d['life'] = Number(d['Life Expectancy']);
      d['gdp'] = Number(d['GDP/Person (PPP$)']);
      d['pop'] = Number(d['Total Population'].replace(/,/g,""));
    });
    
    data = data.filter( (d) => {return d['gdp'] != 0 && d['life'] != 0 && d['pop'] != 0;}  );
    console.log(data)

    const xScale = d3.scaleSymlog().domain(d3.extent(data, d => d.gdp)).range([10, chartWidth-10]);
    const yScale = d3.scaleLinear().domain(d3.extent(data, d => d.life)).range([chartHeight-10, 10]);
    const popScale = d3.scaleSymlog().domain(d3.extent(data, d => d.pop)).range([5,10]);
    const regScale = d3.scaleOrdinal(d3.schemeCategory10);
    
    let yAxis = d3.axisLeft(yScale); 
    yAxisArea.append("g").attr("class", "y axis").call(yAxis);
    let xAxis = d3.axisBottom(xScale); 
    xAxisArea.append("g").attr("class", "x axis").call(xAxis);

    let yGridlines = d3.axisLeft(yScale).tickSize(-chartWidth).tickFormat("");
    yAxisArea.append("g").attr("class", "y gridlines").call(yGridlines);
    let xGridlines = d3.axisBottom(xScale).tickSize(-chartHeight).tickFormat("");
    xAxisArea.append("g").attr("class", "x gridlines").call(xGridlines);


    
    // PAN/ZOOM BEGINS HERE   (OK, Zoomer)

    let viewport = chartArea.append("g");
    viewport.selectAll("circle.point").data(data)
       .join("circle").attr("class","point")
           .attr("cx", d => xScale(d['gdp']))
           .attr("cy", d => yScale(d['life']))
           .attr("r", d => popScale(d['pop']))
           .attr("opacity", 0.8)
           .style("fill", d => regScale(d.Region));
    
    var plotZoom = d3.zoom().on("zoom", plotZoomed);
    
    plot.call(plotZoom);
    
    
    // As with other events, plotZoomed receives one parameter, *event*  (i.e. plotZoomed(event)  ) and can get *this*
    function plotZoomed(event) {    

      console.log(event.transform);
      console.log(event.transform.toString());
      
      viewport.attr("transform", event.transform);

      // update the scales on the axes/gridlines
      // rescale does not modify the source scale, just creates an adjusted copy
      yAxis.scale(event.transform.rescaleY(yScale))
      xAxis.scale(event.transform.rescaleX(xScale))
      yGridlines.scale(event.transform.rescaleY(yScale))
      xGridlines.scale(event.transform.rescaleX(xScale))

      // apply new scaled axes (do not use a transition since zoom triggers so many events!)
      d3.select("g.y.axis").call(yAxis);
      d3.select("g.x.axis").call(xAxis);
      d3.select("g.y.gridlines").call(yGridlines);
      d3.select("g.x.gridlines").call(xGridlines);
   }

   // get rid of circles all over the place with a clip-path
   // region that is "filled" within the <clipPath> will stay, pixels outside of it will be deleted
   
   // You don't see elements in "defs", but you can refer to them with url() syntax
   // Here, the clip-path attr uses the filled black rect in the clipPath element to cut off things
   //  in chartArea automatically once they are specified and linked together
   plot.append("defs").append("clipPath")
                    .attr("id","chartClip")
                    .append("rect").attr("x",0)
                                   .attr("y",0)
                                   .attr("width",chartWidth)
                                   .attr("height",chartHeight);

   chartArea.attr("clip-path","url(#chartClip)");
    
    


  }
  drawPlot();


  

  const drawMap = async () => {
    
    const us = await d3.json("../datasets/us.json");
    let filteredStates = ['2','02','15','60','66','69','72','74','78'];
    us.objects.states.geometries = us.objects.states.geometries.filter( d => {
                          return filteredStates.indexOf( d.id.toString().padStart(2,'0')  ) === -1;
                        });
    
    const states = topojson.feature(us, us.objects.states);
    const statesMesh = topojson.mesh(us, us.objects.states);
    const counties = topojson.feature(us, us.objects.counties);
    const countiesMesh = topojson.mesh(us, us.objects.counties);

    let map = d3.select("#map");
    let mapWidth = map.attr("width");
    let mapHeight = map.attr("height");
    let projection = d3.geoAlbers().fitSize([mapWidth, mapHeight], states);
    let path = d3.geoPath().projection(projection);
    let viewport = map.append("g");

    // Add paths for everything
    // GRATICULE
    viewport.append("path")
        .attr("class","graticule")
        .attr("d",path(d3.geoGraticule10()));
    // STATE POLYGONS
    viewport.selectAll(".state").data(states.features)
        .enter()
        .append("path")
        .attr("class","state")
        .attr("d", path);
    // COUNTY POLYGONS
    viewport.selectAll(".county").data(counties.features)
        .enter()
        .append("path")
        .attr("class","county")
        .attr("d", path);
    // COUNTY MESH
    viewport.append("path")
      .datum(countiesMesh)
      .attr("class","county-outline")
      .attr("d", path);
    // STATE MESH
    viewport.append("path")
      .datum(statesMesh)
      .attr("class","state-outline")
      .attr("d", path);



    // 2. PAN AND ZOOM STARTS HERE
    
    var zoom = d3.zoom()
                  .scaleExtent([1,20])
                  .translateExtent([[-50,-50],[mapWidth+50,mapHeight+50]])  // to lock to edges
                  .on("zoom", mapZoomed);

    map.call(zoom);

    // It's a good habit to manually call a zoom interaction just in case you have code in zoomed() which you need 
    //  to execute before the user plays with the map (e.g. showing/hiding counties).
    // You can feed it zoomIdentity, which is the zoom state in which nothing has changed
    // NOTE: THIS IS A BETTER CHOICE THAN RUNNING THE visibility CODE I DEMOED IN CLASS
    map.call(zoom.transform, d3.zoomIdentity); // Executes zoomed() once because we technically have changed the transform
    

    // This time we're using *destructuring assignments* to directly get the values we need
    // Check out these docs: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment
    function mapZoomed({transform}) {       // Destructuring here directly pulls and assigns the transform
                                            //    key from the *event* parameter, since we only need that one

      // Transform the group object to reflect the zoom action
      viewport.attr("transform", transform.toString() );
      // NOTE: we could also instead adjust projection and path to account for the zoom
      //  However, projections can be time-consuming to calculate, leading to laggy interactions
      //  For some projections like orthographic, you need to recompute the projection to deliver a
      //   consistent user experience (e.g. adjust lambda for the projection to rotate the globe)

      // Divide by scale to make sure strokes remain a consistent width during zooming
      viewport.select(".state-outline")
                  .style("stroke-width", 2 / transform.k);
      viewport.select(".county-outline")
                  .style("stroke-width", 1 / transform.k);

      // Expose county layer when sufficiently zoomed
      viewport.select(".county-outline")
                .attr("visibility", (transform.k > 3) ? "visible" : "hidden");
      viewport.selectAll(".county")
                .attr("visibility", (transform.k > 3) ? "visible" : "hidden");
      // We can't animate the Visibility attribute -- also probably not a good thing to animate anyways
      //  You could chain an animation on opacity with an .end() promise of setting the visibility attribute
      //  There would likely be some lag or skipping due to repeated events during the animation trigger
      
      // See below for why I use visibility rather than opacity

      // OK, Zoomer

    }


    // BONUS: Click on a state/county to zoom in on it!
    viewport.selectAll(".state").on("click",clicked);
    viewport.selectAll(".county").on("click",clicked);
    
    // Opacity=0 means items are still technically onscreen. If we just use opacity then the counties
    //  prevent the states from getting click events, leading to very confusing interactions.
    // This is why "visibility" is used in the code above

    function clicked(event, d) {
      console.log(d)

      // geoPath generators have a few extra functions. .bounds returns a pixel rectangle bounding the shape you give it
      let bounds = path.bounds(d.geometry); // get bounds for clicked state/county
      let dx = bounds[1][0] - bounds[0][0]; // width of state/county
      let dy = bounds[1][1] - bounds[0][1]; // height of state/county
      let x = (bounds[0][0] + bounds[1][0]) / 2; // center x of state/county
      let y = (bounds[0][1] + bounds[1][1]) / 2; // center y of state/county

      // We want to make sure scale is within 1-10 when we click, so things don't zoom too far or too little
      // To compute zoom, we want to make sure the bounding box "just" fits onscreen.
      // dx / mapWidth gets us the portion of the screen the shape takes up without any zoom at all
      //  the lower dx/mapWidth is, the more we need to zoom because the shape is smaller
      // We find the max of dx/mapWidth, dy/mapHeight because we don't want to zoom farther (smaller values need more zoom)
      // We do 1 or 0.9 divided by dx/mapWidth because we need larger numbers to zoom in. 0.9 allows us to pad things a bit
      let scale = Math.max(1, Math.min(10, 0.9 / Math.max( dx / mapWidth, 
                                                           dy / mapHeight )));

      // Think of the translate like a delta describing how much we need to move the map to move a point to a desired position
      // Simplistically, it works like (desired position) - (current position) = (translation)
      // In this case mapWidth/2, the center of the screen is the desired place for our viewport
      // x*scale is the position we want to move to the center (scale is there because we need to move more when zoomed in)
      let translate = [mapWidth / 2 - x * scale, mapHeight / 2 - y * scale];

      // It's hard to programmatically adjust a zoom. The best way is to take the Identity (zoom transform where nothing is changed)
      //  and then modify it using a .translate and .scale
      let newTransform = d3.zoomIdentity
                            .translate(translate[0],translate[1])
                            .scale(scale);
      // We can apply a new transform to the screen by using .call(zoom.tranform, newTransform)
      // This is kinda the same thing as running zoom.transform(newTransform), but the chaining with .call allows us to add an animation
      map.transition().duration(1000).call(zoom.transform, newTransform);

    }
    
    


  }
  drawMap();





  
  
  </script>
  
  
  

  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  
  function sanitize(s) {
    return s.replace("<br>", "\\n")
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
          }
    document.getElementById("display1").innerHTML = sanitize( document.getElementById("notes1").innerText);
    hljs.highlightAll();
  </script>


  </div>
</body>
</html>
