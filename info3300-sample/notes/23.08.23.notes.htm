<html>
<head>
  <meta charset="UTF-8">
  <title>INFO 3300 - Aug 23</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">

  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">
  
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/default.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js"></script>

</head>
<body>
  <div class="container larger">
    <h3>Notes for Wednesday, August 23</h3>
    <p>
    	HW1 is now available on CMS. If you are on the waitlist you will not yet have CMS access -- you will receive an extension for any assignments before your enrollment date.
    </p>
    <p>
      You can access these files from the <a href="https://github.com/jeffrz/info3300-fa2023">course Github repository</a> Here is an <a href="http://rogerdudler.github.io/git-guide/">informal guide to git</a>.
    </p>
    <p>
      To develop efficiently, have a local web server running. Python has a simple, built-in server. Use <tt>python -m http.server</tt> for python 3; use <tt>python -m SimpleHTTPServer 8000</tt> for python 2 (execute "python" in cmd for version number). You probably have python 3.
    </p>
    <p>
      We will be working in Javascript for most of the term. It can act pretty oddly, especially in comparison to languages that strictly type objects. <br/>
      What are some of the unusual aspects of this language? Open a console in your browser...
    </p>
    <p>
      Time permitting, let's also review <a href="https://www.json.org/json-en.html">Javascript Object Notation</a>.
    </p>
    
    <svg width=100 height=100> <rect id="rectangle" x=10 y=10 width=80 height=80 fill="steelblue" /> </svg>
    
    
    <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
    <h5>Code for today:</h5>
    <pre>
      <code id="display1" class="hljs javascript">
      </code>
      <code id="display2" class="hljs javascript">
      </code>
    </pre>


    <!--- Code for today's class --->
    <script id="notes1">
    
      // Try pasting these commands into your browser console
      
      // Console.log is our friend
      console.log('Hello World');

      // Let's explore some Javascript types!
      console.log("--- Testing some types ---")
      console.log("---Numbers!");
      console.log(typeof(1));
      console.log(typeof(1.2));
      console.log(typeof(Math.PI));
      console.log("---Strings!");
      console.log(typeof("hello"));
      console.log(typeof('hello'));
      console.log("---Classes?");
      console.log(typeof(Math));
      console.log("---Objects?");
      console.log(new Object());
      console.log(typeof(new Object()));
      console.log(typeof(/regex/));  // regular expression
      console.log("---Functions?");
      // It's more complicated -- functions are also objects
      console.log(typeof( console.log ));
      console.log("---Undefined and null?");
      console.log(typeof(undefined));  // You will see this most often, it is much like None in python or null in Java in terms of how it is used in JS
      console.log(typeof(null)); // Null is less common than undefined, but worth noting
      // Second bit of weirdness -- it shows as object but its type actually is null (legacy reasons)    
      // Test some unicode  (note <meta> tag in file)
      console.log("---What about unicode?");
      console.log("ドーナツ");
      console.log(typeof("ドーナツ"));  // なに！？！？！？
      
      // Learn a bit more about Objects
      console.log("--- Testing [] and {} ---")
      console.log("Lists and dicts")
      let list = [1, 2, 3];
      console.log( list );
      console.log(typeof( list )); 
      // It says it's an object -- but arrays are a special kind of object (see length property)
      
      // Every object is a dictionary in Javascript -- properties function as key/value pairs
      let dict = {"a": 1, "b": 2};
      console.log( dict );
      console.log(dict["a"]);
      console.log(dict.a); // shortcut to access properties with plain text names
      
      // What about that length part of a dict? What is it?
      list.newKey = "this is a new key on a list";
      console.log(list);
      
      // So what can accept keys?
      console.log("--- So what works like a dict? ---");
      let differentTypes = [3, "hello", new Object(), [1,2,3], function(x) {}, console];
      for (let item of differentTypes) {
        console.log( item, typeof(item) );
        item['test'] = "keyAdded";
        console.log( item['test'] ); 
      } 
      // Though it's often a terrible idea, you can add properties to all sorts of things
      // In some libraries you will find that they add properties to function calls and all sorts of other objects
      //  This can be extremely convenient, but you may not notice them unless you check docs and console.log()
      // Also notice that if you treat a list of things like a dictionary, then the .length property of the list does not get longer as you add keys. It only changes as you add things to the list.
      
      
      console.log("--- Now exploring type coercion ---")
      // A simple addition?
      console.log(0 + '0'); //  ???

      // Type coercion
      console.log(3 + "Rzeszotarski");
      console.log("1" + 2);
      console.log(1 + "2");
      console.log(false + "Rzeszotarski");
      console.log(true + false);
      console.log("true" + false);
      console.log([1,2,3] + 2)
      // Only possibilities: ->string,  ->number,  ->boolean
      // Learn more at https://www.freecodecamp.org/news/js-type-coercion-explained-27ba3d9a2839/
      // Why does this matter?
      
      // let color = dict.color;
      // document.getElementById("rectangle").setAttribute("fill", color);
      
      
      
      
      
      // Comparison weirdness
      // console.log("--- Now trying some comparisons ---")
      console.log( (true + 1) == "2" );
      console.log( 0 == "0" );
      console.log( [] == 0 );
      console.log( [1] == true );
      console.log( [[]] == 0 );
      console.log( [[]] == [] );  // coercion doesn't happen here, so they are unequal
      
      console.log( 'Explicit comparison', '0' === 0 );
      
      // Null and undefined can cause unusual behaviors too
      console.log( 6 + null );
      console.log( 6 + undefined);
      console.log( null === 0 );
      console.log( null === undefined );
      console.log( NaN === NaN );
      console.log( [1,2,3] === [1,2,3] );  // not equal because they are 2 different objects
                                           // to check that the lists are equivalent, use a built-in function or a loop

      // Shortcircuiting of logical statements
      console.log("--- Shortcircuiting ---");
      true || console.log("logged-or") || false
      true && console.log("logged-and") && false
      false && console.log("logged-not-and") && true
      
      
      let test = "script tags. how do they work?";

    </script>


    <script id="notes2">
    
      // How do two script tags interact with each other?
      console.log(test);
      
      
      

    </script>
    
    
    
    
    

    <!--- calls the highlight library to fill the <pre> tag with code --->
    <script>
    function sanitize(s) {
      return s.replace("<br>", "\\n")
              .replace(/&/g, "&amp;")
              .replace(/</g, "&lt;")
              .replace(/>/g, "&gt;")
              .replace(/"/g, "&quot;")
              .replace(/'/g, "&#039;");
            }
      document.getElementById("display1").innerHTML = sanitize( document.getElementById("notes1").innerText);
      document.getElementById("display2").innerHTML = sanitize( document.getElementById("notes2").innerText);
      hljs.highlightAll();
    </script>

  </div>
</body>
</html>
