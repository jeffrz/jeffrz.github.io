<html>
<head>
<title>INFO 3300 - September 11</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">
  
  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/styles/default.min.css">
  <link rel="stylesheet" href="../css/hljs-base16.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/highlight.min.js"></script>
  
  <script src="https://d3js.org/d3.v7.min.js"></script>
  
  <style>
  
  .gridlines line {
    stroke: #bbb;
  }
  
  .gridlines .domain {
    stroke: none;
  }

  </style>

</head>
<body>
  <div class="container larger">
  <h3>Notes for September 11</h3>
  <p>
    Our dataset is sourced from Gapminder. We'll do a spinoff on one of <a href="https://youtu.be/jbkSRLYSojo">Hans Rosling's famous data presentations</a>.
  </p>
  <p>
    The <a href="https://github.com/d3/d3-fetch/tree/v2.0.0">d3.csv command</a> makes use of the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch API</a>. To learn more about why we use ".then", check out the documentation on <a href="https://developers.google.com/web/fundamentals/primers/promises">JS Promises</a>.
  </p>

  <h5>HTML for today:</h5>



  <svg id="scatterplot" height="400" width="400" style="margin-top:50px" >

  </svg>



  <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
  <h5>Code for today:</h5>
  <pre>
    <code id="display" class="hljs javascript">
    </code>
  </pre>

  <!--- Code for today's class --->
  <script id="notes">
    // --- 1
    //  '../datasets/titanic.json' ---> "go up a directory (because we are in /notes/), then go to datasets,
    //                                     then look for titanic.json in that directory
    // console.log( '---Top of file---' );
    
    // So how do we work with the data once it is loaded if JS just keeps on going?
    // We can add something to the promise to tell it what to do when the data comes back in!
    var dataset; // If you think you'll need the data much later on, you can define a var...
    d3.json('../datasets/titanic.json').then( (data) => {
      
    // EVERYTHING having to do with the data variable has to go within this function
    // Because it's asynchronous, JS is going to continue running stuff outside of the .then() while it waits
    // For that reason, outside of .then() the code isn't going to know about the data variable    
    
      console.log(data);
      dataset = data;  // ... and assign the data to it
      
    } );
    // console.log(data);
    console.log(dataset);   //  but... because it's an async call it's going to return undefined outside of .then()
                            //  (at least until .then() executes, then dataset has stuff in it)
                            
    
    // .then is triggered by the promise if it successfully calls back
    // otherwise an error may be recorded
    d3.json('../datasets/titanics.json')
      .then( (data) => { console.log('data', data); }, (error) => { console.log('error', error); } )
    
    // .then() is important because it allows us to work 'asynchronously' and not hold up the browser
    // We'll see another construction that's even more flexible later this term (async + await)
    
    
    // Let's make a plain old scatterplot

    // 0. Find our SVG and get that ready
    //     We're going to use a new way of padding that makes axes easier
    const svg = d3.select('svg#scatterplot');
    const width = svg.attr('width');
    const height = svg.attr('height');
    const margins = {top: 10, right: 10, bottom: 50, left: 50}; // You can also include quotes
    const chartWidth = width - margins.left - margins.right;
    const chartHeight = height - margins.top - margins.bottom;

    // The sneaky trick uses a transform to add in the margins so you can forget about them when making the vis
    let chartArea = svg.append('g')
                       .attr('transform',`translate(${margins.left},${margins.top})`);
          // This is the first time we have seen *string templating*
          // It is useful when you want to include variables inside of a string, and is commonly
          //  seen for things like transform
          // To do it, you use a `` instead of normal quotes '' (press the tilde key next to 1 to get a backtick)
          // When you want to insert a variable, use ${variable} within the template
          // The old way to do this would be: 
          //  .attr('transform','translate('+margins.left+','+margins.top+')')


    // 1. Import some CSV data
    //        .then( function(successfulResult), function(errorMessage) )
    d3.csv('../datasets/gapminder.csv')
      .then( (data) => {
        
    // Again, you have to put EVERYTHING having to do with data inside the .then( function )
        
    console.log(data)
            
    // 2. Check for data issues
    // Let's fix some things up
    data.forEach( (d, i) => {
      d['life'] = Number(d['Life Expectancy']);
      d['gdp'] = Number(d['GDP/Person (PPP$)']);
      // d['pop'] = Number(d['Total Population']); // This will pump out NaNs. Why?
      d['pop'] = Number(d['Total Population'].replace(/,/g,'')); // Fix with replace for commas
    });
    
    // See notes below #4
    data = data.filter( (d) => {return d['gdp'] != 0 && d['life'] != 0 && d['pop'] != 0;}  );
    console.log(data)


    // 3. Let's build some scales
    const gdpExtent = d3.extent(data, d => d['gdp'] );
    const gdpScale = d3.scaleLinear().domain(gdpExtent).range([0, chartWidth]);
    
    const lifeExtent = d3.extent(data, d => d['life'] );
    const lifeScale = d3.scaleLinear().domain(lifeExtent)
                        .range([chartHeight, 0]); // Using the trick of switching the y max & min to make y positions easy

    const popExtent = d3.extent(data, d => d['pop'] );
    const popScale = d3.scaleLinear().domain(popExtent).range([5,10]); // circle size
    
    // Remember, the anonymous functions d => d['pop'] are just a shortcut for:
    //        (d) => { return d['pop']; }
    //    or  function(d) { return d['pop']; }
    // You can change (d) => to d =>  if there is only one parameter going in
    // and you can change => { return d['pop']; } to => d['pop'] if you're immediately returning a value from the function
    
    
    // 4. Start plotting circles and see what happens
    data.forEach( (d, i) => {

      chartArea.append('circle')
          .attr('cx', gdpScale(d['gdp']))
          .attr('cy', lifeScale(d['life']))
          .attr('r', popScale(d['pop']))
          .attr('opacity', 0.8)
          .attr('index', i)  // I usually include the index as an extra attr so that if points look weird, I can find out what's going on in the dataset
          .style('fill', 'steelblue');

    });

    
    // See that it looks VERY weird --
    //  EXAMINED INDEX 177
    // add:
    // data = data.filter( (d) => {return d['gdp'] != 0;}  );
    // This fixes a few points, but there are still 0s skewing our scales.
    // Check again and find a life expectancy of 0 too which we have to fix
    // data = data.filter( (d) => {return d['gdp'] != 0 && d['life'] != 0 && d['pop'] != 0;}  );

    // array.filter is a builtin JS function
    // It loops through the array, making a new array based on filter criteria
    // You give it a function that takes in an object and returns true if it should stick around or false if the object should be eliminated by the filter
    //  We use && here because we want to make sure our points have good values for ALL of those keys
    //     data = data.filter( (d) => {return d['gdp'] != 0 && d['life'] != 0 && d['pop'] != 0;}  );
    
    // We'll put the filter command before we set the scales
      
    
    // ---- 3
    // 5. Let's add some axes
    // We're going to use D3's axis tools to do it
    let leftAxis = d3.axisLeft(lifeScale); // d3.axis____ functions return a *function* that pastes axis labels
                                           //  on demand. You just run the function on a d3 selection and it
                                           //  will insert all sorts of labels and markers for you
    svg.append('g')
      .attr('class', 'y axis')
      .attr('transform',`translate(${margins.left-10},${margins.top})`) 
      .call(leftAxis);

    // Why do we use call? It's because axisBottom returns a function that we want to execute
    // You can think of d3.axis as giving you a function that 'pastes' the axis labels into an element
    //  By running the axis function on an SVG group, we 'paste' some new SVG elements into the group
    // Call is just shorthand for 'run this function on the current entity we're chaining'
    let bottomAxis = d3.axisBottom(gdpScale).ticks(6)  // .ticks tells it how many ticks to draw
    let element = svg.append('g')
                    .attr('class', 'y axis')
                    .attr('transform',`translate(${margins.left},${chartHeight+margins.top+10})`)
                    //.call(bottomAxis);
    bottomAxis(element); // this is what .call(bottomAxis) actually does -- don't do it this way!
    
    
    
    
    // So the process is:
    //  Make a G tag where the axis will live. Use transform to move it where it needs to go
    //  Make a d3.axis(scale) element  (such as d3.axisLeft(lifeScale)
    //  Run .call(axisElement) on your G tag to 'paste' the axis HTML code into the G tag
    //   (this is equivalent to running the axisElement on the G tag)
    
    
    // 5A. We can manually make some gridlines
    //  It would work fine for HW4, but I don't recommend it once you start using axis labels
    
    
    // 5B. Or we can use axes in a clever way
    //  Create the axis
    //   Configure it so that tickFormat is empty (don't make text labels)
    //   Set tickSize to be a negative number, so instead of hanging below the chart the gridlined extend back into it
    
    //  FINALLY, don't forget to use CSS to configure the gridlines a bit
    //   You will want to make the <line> elements a bit lighter and hide the element that has class .domain (that's the perpendicular line that connects the ticks)
    //   See CSS in head of this file for example
    let leftGridlines = d3.axisLeft(lifeScale)
                          .tickSize(-chartWidth-10)
                          .tickFormat('');
    // Notice how we use a different class
    svg.append('g')
      .attr('class', 'y gridlines') // See CSS at top of file!!!
      .attr('transform',`translate(${margins.left-10},${margins.top})`)
      .lower()
      .call(leftGridlines);
    // Make sure to set a gridlines class so you can distinguish it from your axes when styling
    
    
    // The real benefit is that you can use the same configurations on your gridline axis that you used on your label axis. For example, we can put a tick number here
    let bottomGridlines = d3.axisBottom(gdpScale)
                            .tickSize(-chartHeight-10)
                            .tickFormat('')
                            .ticks(6); // Borrowing from our axis labels
    svg.append('g')
      .attr('class', 'x gridlines') // See CSS at top of file!!!
      .attr('transform',`translate(${margins.left},${chartHeight+margins.top+10})`)
      .lower()
      .call(bottomGridlines);
      

    // NOTE: Our gridlines show up on top of the points. In practice you'll want to draw the circles last, or make an SVG group to hold the axes and then make your chart group after.
    // A quick solution would be to add .lower() to the axis G tags to put them to the bottom of the G tag. That's what we did in class
    
    // You can also use .raise() to push stuff to the top if it is underneath things 
    //  We can do that here to put the circles on top
    //  chartArea.raise()

    // Next up: filtering, legends, and advanced formatting
    

    
    }, (error) => { console.log(error)} );


  </script>

  

  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  
  function sanitize(s) {
    return s.replace("<br>", "\\n")
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
          }
    document.getElementById("display").innerHTML = sanitize( document.getElementById("notes").innerText);
    hljs.highlightAll();
  </script>


  </div>
</body>
</html>
