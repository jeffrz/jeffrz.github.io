<html><head>
<title>INFO 3300 - November 27</title>

  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Raleway:400,700" rel="stylesheet">
  
  <link rel="stylesheet" type="text/css" href="../css/normalize.css">
  <link rel="stylesheet" type="text/css" href="../css/skeleton.css">
  <link rel="stylesheet" type="text/css" href="../css/custom-style.css">
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/styles/default.min.css">
  <link rel="stylesheet" href="../css/hljs-base16.css">
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/highlight.min.js"></script>
  
  <script src="https://d3js.org/d3.v7.min.js"></script>
  
  <style>
  </style>

</head>
<body>
  <div class="container larger">
    
    <h3>Notes for November 27</h3>
    <p>Today we'll work with graph data once again. However, this time we will be placing emphasis on the edges between nodes rather than the structural relationship between nodes. For example, while it might be useful to spot character clusters in Les Mis√©rables, you need a different visual metaphor if you want to show more clearly the intensity of interactions *between* characters. Today we'll try out a chord diagram to expose the edges more saliently. While we won't get to in in class, there are also a wide variety of hierarchical visualizations available when you want to show nesting and structural details in a network.</p>
    
    <p>Today's dataset comes from a larger dataset of <a href="https://kaggle.com/mmmarchetti/game-of-thrones-network-analysis">character co-occurrences in the Game of Thrones book series</a>. I aggregated data into a final, sparse dataset of character relationships that show high co-occurrence (>50 interactions across 5 books). If you're a fan of the books and it makes you feel better, I promise I'll update the dataset for Winds of Winter if it ever comes out.</p>
    
    <p><a href="https://observablehq.com/@d3/chord-diagram">Here</a> is an Observable example of a chord diagram. <a href="http://bl.ocks.org/nbremer/94db779237655907b907">This one</a> attempts to add some interactivity.</p>
    
    <p>The <a href="https://github.com/d3/d3-chord">d3 chord library</a> has lots of helpful functions. We'll also be making use of the arc generator from <a href="https://github.com/d3/d3-shape">d3-shape</a>.</p>
    
    <p>To make a color palette for 20 different categories, I used the <a href="http://vrl.cs.brown.edu/color">Colorgorical</a> color optimization tool. <a href="https://projects.susielu.com/viz-palette">Viz Palette</a> is a decent way to test out different color scheme ideas.</p>
  
  
  
    <h5>HTML for today:</h5>
    
    <svg id="chord" height="850" width="850" style="background: #fff; margin-top:50px" >
    </svg>
    



  <!-- This block will be automatically filled with syntax-highlighted code from the script below -->
  <h5>Code for today:</h5>
  <pre>
    <code id="display1" class="hljs javascript">
    </code>
  </pre>


  <script id="notes1">
  
  // Layer for drawing
  const width = d3.select("#chord").attr("width");
  const height = d3.select("#chord").attr("height");
  const chordChart = d3.select("#chord").append("g");
  
  const drawChord = async () => {
    
    // We'll use a color palette generated by this neat optimization tool: http://vrl.cs.brown.edu/color
    const colorPalette = ["#48bf8e", "#075c62", "#a1def0", "#5e2a96", 
                          "#e775cc", "#f3c5fa", "#9a76af", "#1c4585", 
                          "#479abc", "#94ea5b", "#1d6d1f", "#cddb9b", 
                          "#604020", "#d48f4d", "#f24219", "#8e1023", 
                          "#8c956d", "#2cf52b", "#ff0087", "#e9d737"]

    // Load GoT dataset
    const got = await d3.json("../datasets/thrones-cooccur.json");
    console.log(got);
    
    let nodes = got.nodes;
    let links = got.edges;
    
    
    
    // Make a dense edge matrix
    
    
    
    // Make and apply necessary generators
    
    
    
    // Make the outer ring
    
    
                            
    // Make each ring segment using the arc generator



    // Now make a path for each ribbon using a data join
    
    
    
    // Adding in the labels
    
    
    
    // Add interactions
    
    
    
    
    
    // // Now let's see how you might make the arcs have nice gradients
    // // We'll employ the clever defs ID technique from https://bl.ocks.org/JulienAssouline/2847e100ac7d4d3981b0f49111e185fe 
    // 
    // // Define a simple function to generate gradient IDs from a ribbon object
    // let getGradID = chord => `linkGrad-${chord.source.index}-${chord.target.index}`;
    // 
    // // Now make the gradient definitions using a data join
    // var grads = d3.select("#chord").append("defs")
    //   .selectAll("linearGradient")
    //   .data(chords)
    //   .join("linearGradient")
    //   .attr("id", getGradID)
    //   .attr("gradientUnits", "userSpaceOnUse")  // use the coordinate system of whatever is being filled
    //   .attr("x1", d => radius * Math.cos((d.source.endAngle-d.source.startAngle) / 2 + d.source.startAngle - Math.PI/2) )
    //   .attr("y1", d => radius * Math.sin((d.source.endAngle-d.source.startAngle) / 2 + d.source.startAngle - Math.PI/2) )
    //   .attr("x2", d => radius * Math.cos((d.target.endAngle-d.target.startAngle) / 2 + d.target.startAngle - Math.PI/2) )
    //   .attr("y2", d => radius * Math.sin((d.target.endAngle-d.target.startAngle) / 2 + d.target.startAngle - Math.PI/2) )
    // grads.append("stop")
    //   .attr("offset", "0%")
    //   .attr("stop-color", d => colorScale(nodes[ d.source.index ].Affiliation) )
    // grads.append("stop")
    //   .attr("offset", "100%")
    //   .attr("stop-color", d => colorScale(nodes[ d.target.index ].Affiliation) )
    // 
    // // Overwrite the old fill
    // ribbons.attr("fill", d => "url(#" + getGradID(d) + ")" )
    
    
    
    
  }
  drawChord();

  
  

  

  </script>
  
  

  <!--- calls the highlight library to fill the <pre> tag with code --->
  <script>
  
  function sanitize(s) {
    return s.replace("<br>", "\\n")
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
          }
    document.getElementById("display1").innerHTML = sanitize( document.getElementById("notes1").innerText);
    hljs.highlightAll();
  </script>


  </div>
</body>
</html>
